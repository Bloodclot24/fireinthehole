#!/bin/bash

# Salidas: 1 : Error de ambiente no inicializado

# Constantes
MAX_REMITO=99999999
MIN_REMITO=00000000
TIEMPO=2

PRIMERA=1

# Funciones
function handler_sigterm(){
	echo ++ Señal SIGTERM ++
	terminar=1
}

# Catcher
trap "handler_sigterm" SIGTERM

#Si NO esta inicializado el ambiente
if [ -z $SISTEMA_INICIALIZADO ]
then
    echo Error: El ambiente no fue inicializado
    exit 1
fi

# ++ Programa INVONIO ++ #
echo Corriendo proceso $$ invonio...
echo ===========================================================

# Creo un archivo lock oculto con el numero de pid del proceso
bloquearProceso "$0"
if [ $? -ne 0 ]
then
    echo Ya existe un proceso invonio corriendo, se termina la ejecucion.
    Glog invreci "Ya existe un proceso invonio corriendo, se termina la ejecucion." W
    exit 1

fi

# Almaceno la fecha actual
aaaa=`date +%Y`
mm=`date +%m`
dd=`date +%d`
echo Fecha actual: $aaaa$mm$dd
echo  ------------------------------------------------------- 

terminar=0
while [ $terminar -eq 0 ]

do 
  for path_archivo in $grupo/arribos/*
  do
		if [ -f "$path_archivo" ] 
then	  
	  #echo $path_archivo
	  #archivo=`basename $path_archivo`
	  archivo=${path_archivo##*/}
	  echo El nombre del archivo es: $archivo
	  
	  #Verifico el formato del nombre del archivo
	  echo $archivo | grep "^[0-9]\{8\}\.[0-9]\{8\}$" -q
	  
 #     if [ $archivo = "*" ] ; then break ; fi
	 
	  if [ $? = 0 ]
	  then	
		  error_remito=0	
		  remito=${archivo%.*}
		  # Verifico el remito
		  echo El numero del remito es: $remito
		  if [ $remito -ge $MAX_REMITO ] || [ $remito -le $MIN_REMITO ]
		  then
			  error_remito=1
			  echo El remito se encuentra fuera de los limites
		  fi
		  # Verifico la fecha
		  # Formato fecha aaaammdd
		  error_fecha=0
		  fecha=${archivo#*.}
		  anio=${fecha:0:4}
		  mes=${fecha:4:2}
		  dia=${fecha:6:2}
		  echo La fecha es: $fecha
		  if [ $anio -lt "0000" ] || [ $anio -gt "9999" ]
		  then 
			  error_fecha=1
			  echo El anio del archivo es un anio invalido
		  fi
	  
		  if [ $mes -le "00" ] || [ $mes -gt "12" ]
		  then
			  error_fecha=1
			  echo El mes del archivo es un mes invalido
		  fi
	  
		  # Valida que la cantidad de dias de la fecha sea correcta para el mes del que se trata
		  #31 dias: enero,marzo,mayo.julio,agosto,octubre,diciembre
		  #30 dias: abril,junio,setpiembre,noviembre
		  #29 dias: febrero si el a�o es divisible por 400 y no por 100, sino 28 dias.

		  case $mes in
		  [01,03,05,07,08,10,12]) if [ $dia -gt "31" ]
					  then
					      error_fecha=1
					      echo La fecha del archivo es una fecha invalida : 31 dias
					  fi;;
		  [04,06,09,11]) if [ $dia -gt "30" ]
				then
				      error_fecha=1
				      echo La fecha del archivo es una fecha invalida : 30 dias
				fi;;
		  02) if [ $(( $anio % 400 )) -eq "0" ] && [ $(( $anio % 100 )) -ne "0" ]
		      then
			  if [ $dia -gt "29" ]
			  then
			      error_fecha=1
			      echo La fecha del archivo es una fecha invalida : Febrero 29 dias
			  fi
		      elif [ $dia -gt "28" ]
		      then
			    error_fecha=1
			    echo La fecha del archivo es una fecha invalida : Febrero 28 dias 
		      fi;;
		  esac

		  if [ $anio -gt $aaaa ]
		  then
			  error_fecha=1
			  echo La fecha es mayor a la actual [año mayor al actual]
		  else
			  if [ $anio -eq $aaaa ] &&  [ $mes -gt $mm ]
			  then
				  error_fecha=1
				  echo La fecha es mayor a la actual [igual año, mes mayor al actual]
			  else
				  if [ $anio -eq $aaaa ] &&  [ $mes -eq $mm ] && [ $dia -gt $dd ]
				  then
					  error_fecha=1
					  echo La fecha es mayor a la actual [igual año y mes, dia mayor al actual]
				  fi		
			  fi
		  fi		

		  # Si existe algun error en el nombre del archivo lo muevo a la carpera /grupo/rechazados,
		  # sino /grupo/aceptados
		  if [ $error_remito -eq "1" ] || [ $error_fecha -eq "1" ]
		  then
			  mv "$grupo/arribos/$archivo" $grupo/rechazados
			  echo El archivo se coloco en la carpeta de rechazados
		  else
			  mv "$grupo/arribos/$archivo" $grupo/recibidos	
			  echo El archivo se coloco en la carpeta de recibidos		
		  fi
	  else
#		  if [ -f "$archivo" ]
#		  then
		      mv "$grupo/arribos/$archivo" $grupo/rechazados
		      echo El formato del nombre del archivo es invalido
#		  else
#		      echo No es un archivo!!!!!!!	      
#		  fi
	  fi

	  # Si hay una señal de SIGTERM, interrumpo el loop
	  if [ $terminar -eq 1 ]; then break; fi

#	  echo  -------------------------------------------------------
	  
#	2DA PARTE
	#vER SI HAY ARCHIVOS EN RECIBIDOS
			# Ejecutar invreci
			# Validar que no este corriendo ya el invreci siempre q haya archivos en recibidos
			# e invreci no este corriendo.
			#invreci

			# TODO Ver si va dentro o fuera del for
		# Si invreci se ejecuto correctamente, mostrar el PID de invreci

			# Sino, Mostrar el mensaje de error explicativo.
#		  fi
#	 done
fi
  done

  for archivo in $grupo/recibidos/*
  do
     if [ -e "$archivo" ]
     then
	# Ejecutar invreci
	# Validar que no este corriendo ya el invreci siempre q haya archivos en recibidos
	# e invreci no este corriendo.
	if [ $PRIMERA -ne 0  ]
	then
	      echo "Procesando invreci primera vez..."
	      ./invreci&
	      PIDINVRECI=$!
	      echo El PID del comando invreci es: $PIDINVRECI
	      PRIMERA=0
	else
	      ps -eo pid | grep "$PIDINVRECI" -q 
	      if [ $? -ne 0 ]
	      then
		  echo "Procesando invreci..." 
		  ./invreci&
		   PIDINVRECI=$!
		   echo El PID del comando invreci es: $PIDINVRECI
	      else
		   echo Error: ya se esta ejecutando el comando invreci en este momento
	      fi
	fi
	# Si se ejecuto correctamente, muestro el PID de invreci
	#echo El PID del comando invreci es: $!
	#$PIDINVRECI=$!
	
	# grep devuelve 0 si encontro las lineas, y 1 en otro caso.
        #ps -eo pid | grep $PIDINVRECI -q	
			
	# Sino, si invreci termino con el codigo de error que indica que ya se encontraba
	# ejecutandose, muestro el error correspondiente.
	#echo Error: ya se esta ejecutando el comando invreci en este momento
	# Si invreci se ejecuto correctamente, mostrar el PID de invreci
	# Sino, Mostrar el mensaje de error explicativo.
      fi
  done

  sleep $TIEMPO

done

# Elimino el archivo lock oculto
desbloquearProceso "$0"

echo ===========================================================
echo Fin del proceso invonio $$
